package testutils

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"github.com/gin-gonic/gin"
	"log"
	"net/http"
	"net/http/httptest"
	"os"
	"testing"
	"togglDecks/common"
	"togglDecks/db"
	"togglDecks/logging"
)

func RemoveAutogeneratedDBs() {

}
func TestRequiresDB(m *testing.M) {
	logging.Logger.Info("initializing tests...")

	common.LoadEnvFile()

	logging.Logger.Info("migrating db...")
	db.MigrateDb()
	logging.Logger.Info("db migrated successfully")

	logging.Logger.Info("running tests...")
	code := m.Run()

	// FIXME: do Cleanup
	logging.Logger.Info("cleaning up...")

	os.Exit(code)
}

func ParseRecorderBodyJson[T any](recorder httptest.ResponseRecorder, v *T) error {
	err := json.Unmarshal(recorder.Body.Bytes(), v)

	if err != nil {
		return errors.New(fmt.Sprintf("could not parse response body %v", err))
	}

	return nil
}

func CreateResponseBody(obj interface{}) *bytes.Buffer {
	var buffer bytes.Buffer

	err := json.NewEncoder(&buffer).Encode(obj)
	if err != nil {
		log.Fatal(err)
	}

	return &buffer
}

type MockApiCall struct {
	Method      string
	Path        string
	Body        interface{}
	QueryParams map[string]string
}

func MockRequest(t *testing.T, router *gin.Engine, specs MockApiCall) *httptest.ResponseRecorder {
	recorder := httptest.NewRecorder()
	request, err := http.NewRequest(specs.Method, specs.Path, CreateResponseBody(specs.Body))

	if err != nil {
		t.Fatal(err)
	}

	router.ServeHTTP(recorder, request)
	return recorder
}
